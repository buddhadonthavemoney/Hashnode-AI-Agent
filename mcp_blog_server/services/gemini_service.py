"""
Gemini AI service for blog content generation.
"""

import logging
import time
from typing import List, Optional

import google.generativeai as genai
from google.generativeai.types import HarmCategory, HarmBlockThreshold

from ..config import settings
from ..models.blog import BlogPost

logger = logging.getLogger(__name__)


class GeminiService:
    """Service for generating blog content using Google Gemini AI."""
    
    def __init__(self):
        """Initialize the Gemini service."""
        genai.configure(api_key=settings.gemini_api_key)
        self.model = genai.GenerativeModel(settings.gemini_model)
        
        # Configure safety settings
        self.safety_settings = {
            HarmCategory.HARM_CATEGORY_HATE_SPEECH: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
            HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
            HarmCategory.HARM_CATEGORY_HARASSMENT: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
            HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
        }
    
    def generate_blog_post(self, title: str, notes: str, tags: Optional[List[str]] = None) -> BlogPost:
        """
        Generate a blog post from title and notes.
        
        Args:
            title: The blog post title
            notes: Rough notes for the blog post
            tags: Optional list of tags
            
        Returns:
            BlogPost: Generated blog post
            
        Raises:
            Exception: If generation fails
        """
        try:
            start_time = time.time()
            
            # Create the prompt
            prompt = self._create_prompt(title, notes, tags)
            
            logger.info(f"Generating blog post for title: {title}")
            
            # Generate content
            response = self.model.generate_content(
                prompt,
                safety_settings=self.safety_settings,
                generation_config=genai.GenerationConfig(
                    temperature=0.7,
                    top_p=0.8,
                    top_k=40,
                    max_output_tokens=4000,
                )
            )
            
            if not response.text:
                raise Exception("No content generated by Gemini")
            
            # Parse the response
            content = response.text.strip()
            
            # Extract summary (first paragraph or first 200 chars)
            summary = self._extract_summary(content)
            
            generation_time = time.time() - start_time
            logger.info(f"Blog post generated in {generation_time:.2f} seconds")
            
            return BlogPost(
                title=title,
                content=content,
                tags=tags,
                summary=summary
            )
            
        except Exception as e:
            logger.error(f"Error generating blog post: {str(e)}")
            raise Exception(f"Failed to generate blog post: {str(e)}")
    
    def _create_prompt(self, title: str, notes: str, tags: Optional[List[str]] = None) -> str:
        """Create a prompt for blog post generation."""
        
        tags_section = ""
        if tags:
            tags_section = f"\n\nTags to incorporate: {', '.join(tags)}"
        
        prompt = f"""
You are a professional backend python senior engineer writing a technical blog post. Be quirky and unhinged like a senior engineer who's tired of LinkedIn influencer bullshit.

Title: {title}

Rough Notes:
{notes}{tags_section}

Requirements:
1. Write in a professional but irreverent tone - like a senior engineer who knows their stuff
2. Use proper Markdown formatting with headers, lists, code blocks, etc.
3. Include an engaging introduction and conclusion
4. Make the content informative and actionable with real examples
5. Use appropriate technical terminology but explain complex concepts
6. Structure the content with clear sections using # ## ### headers
7. Add code examples in proper ```language code blocks where relevant
8. Keep the content focused and valuable to readers
9. Be human, funny, and slightly unhinged - capture personality in the writing
10. Write directly in markdown - do NOT wrap your response in code blocks or add "```markdown" tags

Generate the blog post content directly as markdown text, starting with the main heading:
"""
        
        return prompt.strip()
    
    def _extract_summary(self, content: str) -> str:
        """Extract a summary from the generated content."""
        # Remove markdown headers and formatting for summary
        lines = content.split('\n')
        summary_lines = []
        
        for line in lines:
            line = line.strip()
            if line and not line.startswith('#') and not line.startswith('```'):
                summary_lines.append(line)
                if len(' '.join(summary_lines)) > 150:
                    break
        
        summary = ' '.join(summary_lines)
        
        # Limit to 200 characters
        if len(summary) > 200:
            summary = summary[:197] + "..."
        
        return summary 